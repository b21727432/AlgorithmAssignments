import java.io.*;
import java.util.*;
public class Main {

    public static void main(String[] args) throws IOException {
        FileWriter fileWriter = new FileWriter("output.txt");
        PrintWriter printWriter = new PrintWriter(fileWriter);
        Random randomNumber = new Random();

    //    System.out.println(binarySearch(bestArray,bestArray.length,5));
        // radix sort
            for(int j = 0; j < 11; j++){
            long sumOfBest1 = 0;
            long sumOfWorst1 = 0;
            long sumOfAvg1 = 0;
            for(int a=1;a<1000;a++){
                int[] avgArray = radixBest(j*1000);
                int[] tempArray = createWorstArray(j*1000);
                int[] temp2Array = createAvgArray(j*1000);
                sumOfBest1 += radixSort(avgArray,avgArray.length);
                sumOfWorst1 += radixSort(temp2Array,temp2Array.length);
                sumOfAvg1 += radixSort(tempArray,tempArray.length);
            }
            sumOfBest1 = sumOfBest1 / 1000;
            sumOfWorst1 = sumOfWorst1 / 1000;
            sumOfAvg1 = sumOfAvg1 / 1000;
            printWriter.print(j*1000+" "+sumOfBest1+" "+sumOfWorst1+" "+sumOfAvg1+"\n");
            }
            // selection
            for(int j=0;j<11;j++){

                long sumOfBest2 = 0;
            long sumOfWorst2 = 0;
            long sumOfAvg2 = 0;
            for(int x=1;x<10;x++){
                int[] avgArray = createBestArray(j*1000);
                int[] tempArray = createWorstArray(j*1000);
                int[] temp2Array = createAvgArray(j*1000);
                sumOfBest2 += selectionSort(avgArray);
                sumOfWorst2 += selectionSort(tempArray);
                sumOfAvg2 += selectionSort(temp2Array);
            }
            sumOfBest2 = sumOfBest2 / 10;
            sumOfWorst2 = sumOfWorst2 / 10;
            sumOfAvg2 = sumOfAvg2 / 10;

            printWriter.print(j*1000+" "+sumOfBest2+" "+sumOfWorst2+" "+sumOfAvg2+"\n");
            }
            // inserion sort
            for(int j=0;j<11;j++){
                long sumOfBest = 0;
                long sumOfWorst = 0;
                long sumOfAvg = 0;
                for(int i=1;i<100;i++){
                    int[] avgArray = createBestArray(j*1000);
                    int[] tempArray = createWorstArray(j*1000);
                    int[] temp2Array = createAvgArray(j*1000);
                    sumOfBest += insertionSort(avgArray);
                    sumOfWorst += insertionSort(tempArray);
                    sumOfAvg += insertionSort(temp2Array);

                }
                sumOfBest = sumOfBest / 100 ;
                sumOfWorst = sumOfWorst / 100 ;
                sumOfAvg = sumOfAvg / 100;
                printWriter.print(j*1000+" "+sumOfBest+" "+sumOfWorst+" "+sumOfAvg+"\n");
            }
            for(int j=0;j<11;j++){
                long sumOfBest3 = 0;
            long sumOfWorst3 = 0;
            long sumOfAvg3 = 0;

            for(int y=1;y<1000;y++){
                int[] avgArray = createBestArray(j*1000);
                int[] tempArray = createWorstArray(j*1000);
                int[] temp2Array = createAvgArray(j*1000);

                long startTime = System.nanoTime();
                sort(avgArray,0,avgArray.length-1);
                long endTime = System.nanoTime();
                long duration = endTime - startTime;
                long startTime1 = System.nanoTime();
                sort(tempArray,0,tempArray.length-1);
                long endTime1 = System.nanoTime();
                long duration1 = endTime1 - startTime1;
                long startTime2 = System.nanoTime();
                sort(temp2Array,0,temp2Array.length-1);
                long endTime2 = System.nanoTime();
                long duration2 = endTime2 - startTime2;
                sumOfBest3 += duration;
                sumOfWorst3 += duration1;
                sumOfAvg3 += duration2;
            }
            sumOfBest3 = sumOfBest3 /1000;
            sumOfWorst3 = sumOfWorst3 / 1000;
            sumOfAvg3 = sumOfAvg3 / 1000;

            printWriter.print(j*1000+" "+sumOfBest3/1+" "+sumOfWorst3/1+" "+sumOfAvg3/1+"\n");
            }
            // binary search
        for(int j=1;j<101;j++) {
            long sumOfBest5 = 0;
            long sumOfWorst5 = 0;
            long sumOfAvg5 = 0;
            for (int x = 0; x < 1000; x++) {
                int[] avgArray = createBestArray((j * 100) + 1);
                int[] tempArray = createBestArray((j * 100) + 1);
                int[] temp2Array = createBestArray((j * 100) + 1);
                //int[] avgArray = new int[]{0,1,2,3,4,5,6,7,8,9,10};

                //  int[] tempArray = new int[]{0,1,2,3,4,5,6,7,8,9,10};

                //  int[] temp2Array = new int[]{0,1,2,3,4,5,6,7,8,9,10};

                //          System.out.println(avgArray.length+"selam"+avgArray[(0+avgArray.length)/2]);
                long startTime = System.nanoTime();
                binarySearch(avgArray, avgArray.length, j * 50);
                long endTime = System.nanoTime();
                long duration = endTime - startTime;
                long startTime1 = System.nanoTime();
                binarySearch(tempArray, tempArray.length, j * 1000);
                long endTime1 = System.nanoTime();
                long duration1 = endTime1 - startTime1;
                long startTime2 = System.nanoTime();
                binarySearch(temp2Array, temp2Array.length, 0);
                long endTime2 = System.nanoTime();
                long duration2 = endTime2 - startTime2;

                sumOfBest5 += duration;
                sumOfWorst5 += duration1;
                sumOfAvg5 += duration2;
            }
            sumOfBest5 = sumOfBest5 / 1000;
            sumOfWorst5 = sumOfWorst5 / 1000;
            sumOfAvg5 = sumOfAvg5 / 1000;
            printWriter.print(j * 100 + " " + sumOfBest5 + " " + sumOfWorst5 + " " + sumOfAvg5 + "\n");
        }

        printWriter.close();
    }

    public static long radixSort(int[] array,int len){
        long startTime = System.nanoTime();
        int max  = getMax(array,len);
        for(int i=1;max/i>0;i=i*10){
            countSort(array, array.length, i);
        }

      /*  for(int i=0;i<array.length;i++) {

        System.out.print(array[i]);
        }*/
        long endTime = System.nanoTime();
        long duration = (endTime - startTime);
       // System.out.println(duration);
        return duration;
    }
    public static void countSort(int[] array,int len,int dig){
        int output[] = new int[len]; // output array
        int i;
        int count[] = new int[10];
        Arrays.fill(count,0);
        for (i = 0; i < len; i++)
            count[ (array[i]/dig)%10 ]++;

        for (i = 1; i < 10; i++)
            count[i] += count[i - 1];

        for (i = len - 1; i >= 0; i--)
        {
            output[count[ (array[i]/dig)%10 ] - 1] = array[i];
            count[ (array[i]/dig)%10 ]--;
        }

        for (i = 0; i < len; i++)
            array[i] = output[i];

     //   System.out.println(duration);
    }


    public static  long selectionSort(int[] array){
        long startTime = System.nanoTime();
        int len = array.length;
        int min;


        for(int j=0;j<len;j++){
            min = j;
            for(int i=j+1;i<len;i++){
                if(array[i] < array[min]){
                    min = i;
                }
            }
            int temp = array[j];
            array[j] = array[min];
            array[min] = temp;

        }

 /*       for(int i=0;i<array.length;i++){
            System.out.print(array[i]);
        }*/
        long endTime = System.nanoTime();
        long duration = (endTime - startTime);
      //  System.out.println(duration);
        return duration;
    }

    public static long insertionSort(int[] array){
        long startTime = System.nanoTime();
        int i,j;
        for(i=0;i<array.length;i++){
            for(j=i;j>0;j--){
                if(array[j] < array[j-1]){
                    int temp = array[j];
                    array[j] = array[j-1];
                    array[j-1] = temp;
                }
                else
                    break;
            }
        }
     /*   for(i=0;i<array.length;i++){
            System.out.print(array[i]);
        }*/
        long endTime = System.nanoTime();
        long duration = (endTime - startTime);
       // System.out.println(duration/10e5);
        return duration;
    }
    public static void merge(int arr[], int l, int m, int r)
    {
        // Find sizes of two subarrays to be merged
        int n1 = m - l + 1;
        int n2 = r - m;

        /* Create temp arrays */
        int L[] = new int [n1];
        int R[] = new int [n2];

        /*Copy data to temp arrays*/
        for (int i=0; i<n1; ++i)
            L[i] = arr[l + i];
        for (int j=0; j<n2; ++j)
            R[j] = arr[m + 1+ j];


        /* Merge the temp arrays */

        // Initial indexes of first and second subarrays
        int i = 0, j = 0;

        // Initial index of merged subarry array
        int k = l;
        while (i < n1 && j < n2)
        {
            if (L[i] <= R[j])
            {
                arr[k] = L[i];
                i++;
            }
            else
            {
                arr[k] = R[j];
                j++;
            }
            k++;
        }

        /* Copy remaining elements of L[] if any */
        while (i < n1)
        {
            arr[k] = L[i];
            i++;
            k++;
        }

        /* Copy remaining elements of R[] if any */
        while (j < n2)
        {
            arr[k] = R[j];
            j++;
            k++;
        }
    }
    public static void sort(int arr[], int l, int r)
    {
        if (l < r)
        {
            // Find the middle point
            int m = (l+r)/2;

            // Sort first and second halves
            sort(arr, l, m);
            sort(arr , m+1, r);

            // Merge the sorted halves
            merge(arr, l, m, r);
        }

    }

     //   System.out.println(duration);
       /* for(i=0;i<array.length;i++){
            System.out.print(array[i]);
        }*/




  /*  public static int[] mergeSort(int[] array){

        int start,mid,end;
        start = 0;
        mid = array.length/2;
        end = array.length;


        return array;
    }*/

    public static int binarySearch(int[] array,int len,int value){

        int left = 0; // ilk index
        int right = len-1; // son idex
        int mid;
        while (left <= right){
            mid = (left + right)/2;
            if(array[mid] == value){
                return mid;
            }
            else if(array[mid] > value)
                right = mid -1;
            else if(array[mid] < value){
                left = mid+1;
            }
        }

        return -1;
    }

    public static int getMax(int[] array,int n){
        int max = array[0];
        for(int i=0;i<n;i++){
            if(array[i]>max){
                max = array[i];
            }
        }
        return max;
    }
    public static int getMin(int[] array,int n){
        int min = array[0];
        for(int i=0;i<n;i++){
            if(array[i]<min){
                min = array[i];
            }
        }
        return min;
    }
    public static int[] createBestArray(int n){
        int[] bestArray = new int[n];
        for(int i=0;i<n;i++){
            bestArray[i]=i;
        }
        return bestArray;
    }
    public static int[] createAvgArray(int n){
        int[] avgArray = new int[n];
        Random randomNumber = new Random();
        for(int i= 0;i<n;i++){
            int x = randomNumber.nextInt(n+1);
            avgArray[i] = x;
        }
        return avgArray;
    }
    public static int[] createWorstArray(int n){
        int[] worstArray = new int[n];
        for(int i=0;i<n;i++){
            worstArray[i] = n-i;
        }
        return worstArray;
    }
    public static int[] radixBest(int n){
        int[] radixBest = new int[n];
        Random randomNumber = new Random();
        for(int i=0;i<n;i++){
            int x = randomNumber.nextInt(10);
            radixBest[i] = x;
        }
        return radixBest;
    }
}
